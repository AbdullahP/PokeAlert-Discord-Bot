version: '3.8'

services:
  pokemon-bot:
    build: 
      context: .
      dockerfile: Dockerfile
    image: pokemon-discord-bot:latest
    container_name: pokemon-bot-prod
    restart: unless-stopped
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MONITORING_INTERVAL=${MONITORING_INTERVAL:-60}
      - MAX_CONCURRENT=${MAX_CONCURRENT:-10}
      - CONFIG_DIR=/app/config
      - DATA_DIR=/app/data
      - LOGS_DIR=/app/logs
      - DATABASE_URL=${DATABASE_URL:-/app/data/pokemon_bot.db}
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL=${BACKUP_INTERVAL:-3600}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - HEALTH_CHECK_PORT=${HEALTH_CHECK_PORT:-8080}
    volumes:
      - pokemon_data:/app/data
      - pokemon_logs:/app/logs
      - pokemon_backups:/app/backups
      - ./config:/app/config:ro
    ports:
      - "${HEALTH_CHECK_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "python", "/app/src/health_check.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - pokemon-bot-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Backup service for automated database backups
  backup-service:
    image: pokemon-discord-bot:latest
    container_name: pokemon-backup-service
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=/app/data/pokemon_bot.db
      - BACKUP_DIR=/app/backups
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    volumes:
      - pokemon_data:/app/data:ro
      - pokemon_backups:/app/backups
    command: ["python", "/app/scripts/db_backup.py", "--daemon"]
    networks:
      - pokemon-bot-network
    depends_on:
      - pokemon-bot
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Log rotation service
  log-rotator:
    image: alpine:latest
    container_name: pokemon-log-rotator
    restart: unless-stopped
    volumes:
      - pokemon_logs:/logs
    command: >
      sh -c "
        while true; do
          find /logs -name '*.log' -size +50M -exec gzip {} \;
          find /logs -name '*.gz' -mtime +7 -delete
          sleep 3600
        done
      "
    networks:
      - pokemon-bot-network

volumes:
  pokemon_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  pokemon_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH:-./logs}
  pokemon_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${BACKUP_PATH:-./backups}

networks:
  pokemon-bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16